model User {
  discordId     String  @unique
  username      String
  discriminator String
  avatar        String?
  bot           Boolean
  system        Boolean
  locale        String?
  relations     RelationshipItem[]
    relationRequests RelationshipRequest[]
}

model Relationship {
  id        String             @id @default(cuid())
  name      String
  description String?
  exclusive Boolean
  unilateral Boolean
  items     RelationshipItem[]
  relationRequests RelationshipRequest[]
}

model RelationshipItem {
  id        String             @id @default(cuid())
  relationship Relationship @relation(fields: [relationshipId], references: [id])
  relationshipId String
    user      User @relation(fields: [userId], references: [discordId])
    userId    String
    targetUserId String
}

model RelationshipRequest {
  id        String             @id @default(cuid())
  relationship Relationship @relation(fields: [relationshipId], references: [id])
  relationshipId String
  user      User @relation(fields: [userId], references: [discordId])
  userId    String
}

model Guild {
  id                          String    @id @default(cuid())
  discordId                   String    @unique
  name                        String
  icon                        String?
  splash                      String?
  discoverySplash             String?
  owner                       Boolean
  ownerId                     String
  permissions                 String
  region                      String
  afkChannelId                String?
  afkTimeout                  Int
  widgetEnabled               Boolean
  widgetChannelId             String?
  verificationLevel           Int
  defaultMessageNotifications Int
  explicitContentFilter       Int
  roles                       Role[]
  mfaLevel                    Int
  applicationId               String?
  systemChannelId             String?
  systemChannelFlags          Int
  rulesChannelId              String?
  joinedAt                    DateTime
  large                       Boolean
  unavailable                 Boolean
  memberCount                 Int
  maxPresences                Int?
  maxMembers                  Int
  vanityUrlCode               String?
  description                 String?
  banner                      String?
  premiumTier                 Int
  premiumSubscriptionCount    Int
  preferredLocale             String
  publicUpdatesChannelId      String?
  maxVideoChannelUsers        Int?
  approximateMemberCount      Int?
  approximatePresenceCount    Int?
  createdAt                   DateTime  @default(now())
  updatedAt                   DateTime  @updatedAt
  deletedAt                   DateTime?
}

model Role {
  id          String    @id @default(cuid())
  discordId   String    @unique
  name        String
  color       Int
  hoist       Boolean
  position    Int
  permissions String
  managed     Boolean
  mentionable Boolean
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  deletedAt   DateTime?
  guild       Guild?    @relation(fields: [guildId], references: [id])
  guildId     String
}

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}
